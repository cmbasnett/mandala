#include "keyboard.hpp"

namespace naga
{
	std::vector<std::pair<Key, std::string>> key_aliases = {
		{ Key::APOSTROPHE, "'" },
		{ Key::COMMA, "," },
		{ Key::MINUS, "-" },
		{ Key::PERIOD, "." },
		{ Key::SLASH, "/" },
		{ Key::NR_0, "0" },
		{ Key::NR_1, "1" },
		{ Key::NR_2, "2" },
		{ Key::NR_3, "3" },
		{ Key::NR_4, "4" },
		{ Key::NR_5, "5" },
		{ Key::NR_6, "6" },
		{ Key::NR_7, "7" },
		{ Key::NR_8, "8" },
		{ Key::NR_9, "9" },
		{ Key::SEMICOLON, ";" },
		{ Key::EQUAL, "=" },
		{ Key::LEFT_BRACKET, "[" },
		{ Key::BACKSLASH, "\\" },
		{ Key::RIGHT_BRACKET, "]" },
		{ Key::GRAVE_ACCENT, "`" }
	};

	//std::ostream& operator<<(std::ostream& ostream, const Key& key)
	//{
	//	static std::map<Key, std::string> map = {
	//		{ Key::SPACE, "SPACE" },
	//		{ Key::APOSTROPHE, "APOSTROPHE" },
	//		{ Key::COMMA, "COMMA" },
	//		{ Key::MINUS, "MINUS" },
	//		{ Key::PERIOD, "PERIOD" },
	//		{ Key::SLASH, "SLASH" },
	//		{ Key::NR_0, "NR_0" },
	//		{ Key::NR_1, "NR_1" },
	//		{ Key::NR_2, "NR_2" },
	//		{ Key::NR_3, "NR_3" },
	//		{ Key::NR_4, "NR_4" },
	//		{ Key::NR_5, "NR_5" },
	//		{ Key::NR_6, "NR_6" },
	//		{ Key::NR_7, "NR_7" },
	//		{ Key::NR_8, "NR_8" },
	//		{ Key::NR_9, "NR_9" },
	//		{ Key::SEMICOLON, "SEMICOLON" },
	//		{ Key::EQUAL, "EQUAL" },
	//		{ Key::A, "A" },
	//		{ Key::B, "B" },
	//		{ Key::C, "C" },
	//		{ Key::D, "D" },
	//		{ Key::E, "E" },
	//		{ Key::F, "F" },
	//		{ Key::G, "G" },
	//		{ Key::H, "H" },
	//		{ Key::I, "I" },
	//		{ Key::J, "J" },
	//		{ Key::K, "K" },
	//		{ Key::L, "L" },
	//		{ Key::M, "M" },
	//		{ Key::N, "N" },
	//		{ Key::O, "O" },
	//		{ Key::P, "P" },
	//		{ Key::Q, "Q" },
	//		{ Key::R, "R" },
	//		{ Key::S, "S" },
	//		{ Key::T, "T" },
	//		{ Key::U, "U" },
	//		{ Key::V, "V" },
	//		{ Key::W, "W" },
	//		{ Key::X, "X" },
	//		{ Key::Y, "Y" },
	//		{ Key::Z, "Z" },
	//		{ Key::LEFT_BRACKET, "LEFT_BRACKET" },
	//		{ Key::BACKSLASH, "BACKSLASH" },
	//		{ Key::RIGHT_BRACKET, "RIGHT_BRACKET" },
	//		{ Key::GRAVE_ACCENT, "GRAVE_ACCENT" },
	//		{ Key::WORLD_1, "WORLD_1" },
	//		{ Key::WORLD_2, "WORLD_2" },
	//		{ Key::ESCAPE, "ESCAPE" },
	//		{ Key::ENTER, "ENTER" },
	//		{ Key::TAB, "TAB" },
	//		{ Key::BACKSPACE, "BACKSPACE" },
	//		{ Key::INSERT, "INSERT" },
	//		{ Key::DEL, "DEL" },
	//		{ Key::RIGHT, "RIGHT" },
	//		{ Key::LEFT, "LEFT" },
	//		{ Key::DOWN, "DOWN" },
	//		{ Key::UP, "UP" },
	//		{ Key::PAGE_UP, "PAGE_UP" },
	//		{ Key::PAGE_DOWN, "PAGE_DOWN" },
	//		{ Key::HOME, "HOME" },
	//		{ Key::END, "END" },
	//		{ Key::CAPS_LOCK, "CAPS_LOCK" },
	//		{ Key::SCROLL_LOCK, "SCROLL_LOCK" },
	//		{ Key::NUM_LOCK, "NUM_LOCK" },
	//		{ Key::PRINT_SCREEN, "PRINT_SCREEN" },
	//		{ Key::PAUSE, "PAUSE" },
	//		{ Key::F1, "F1" },
	//		{ Key::F2, "F2" },
	//		{ Key::F3, "F3" },
	//		{ Key::F4, "F4" },
	//		{ Key::F5, "F5" },
	//		{ Key::F6, "F6" },
	//		{ Key::F7, "F7" },
	//		{ Key::F8, "F8" },
	//		{ Key::F9, "F9" },
	//		{ Key::F10, "F10" },
	//		{ Key::F11, "F11" },
	//		{ Key::F12, "F12" },
	//		{ Key::F13, "F13" },
	//		{ Key::F14, "F14" },
	//		{ Key::F15, "F15" },
	//		{ Key::F16, "F16" },
	//		{ Key::F17, "F17" },
	//		{ Key::F18, "F18" },
	//		{ Key::F19, "F19" },
	//		{ Key::F20, "F20" },
	//		{ Key::F21, "F21" },
	//		{ Key::F22, "F22" },
	//		{ Key::F23, "F23" },
	//		{ Key::F24, "F24" },
	//		{ Key::F25, "F25" },
	//		{ Key::KP_0, "KP_0" },
	//		{ Key::KP_1, "KP_1" },
	//		{ Key::KP_2, "KP_2" },
	//		{ Key::KP_3, "KP_3" },
	//		{ Key::KP_4, "KP_4" },
	//		{ Key::KP_5, "KP_5" },
	//		{ Key::KP_6, "KP_6" },
	//		{ Key::KP_7, "KP_7" },
	//		{ Key::KP_8, "KP_8" },
	//		{ Key::KP_9, "KP_9" },
	//		{ Key::KP_DECIMAL, "KP_DECIMAL" },
	//		{ Key::KP_DIVIDE, "KP_DIVIDE" },
	//		{ Key::KP_MULTIPLY, "KP_MULTIPLY" },
	//		{ Key::KP_SUBTRACT, "KP_SUBTRACT" },
	//		{ Key::KP_ADD, "KP_ADD" },
	//		{ Key::KP_ENTER, "KP_ENTER" },
	//		{ Key::KP_EQUAL, "KP_EQUAL" },
	//		{ Key::LEFT_SHIFT, "LEFT_SHIFT" },
	//		{ Key::LEFT_CONTROL, "LEFT_CONTROL" },
	//		{ Key::LEFT_ALT, "LEFT_ALT" },
	//		{ Key::LEFT_SUPER, "LEFT_SUPER" },
	//		{ Key::RIGHT_SHIFT, "RIGHT_SHIFT" },
	//		{ Key::RIGHT_CONTROL, "RIGHT_CONTROL" },
	//		{ Key::RIGHT_ALT, "RIGHT_ALT" },
	//		{ Key::RIGHT_SUPER, "RIGHT_SUPER" },
	//		{ Key::MENU, "MENU" }
	//	};

	//	auto map_itr = map.find(key);

	//	if (map_itr == map.end())
	//	{
	//		throw std::exception("unknown key");
	//	}

	//	ostream << map_itr->second;

	//	return ostream;
	//}

	//std::istream& operator>>(std::istream& istream, Key& key)
	//{
	//	return istream;
	//}
}